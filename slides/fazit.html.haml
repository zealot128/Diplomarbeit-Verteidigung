%section.slide#fazit.toc
  %h1 Fazit
%section.slide
  %h2 Lessons learned
  %ul
    %li Anfangs hohe Disziplin notwendig
    %li Wissen und Erfahrung notwendig über Software-Design
    %li
      Einige Sachverhalte scheinbar nicht testbar (&rarr; Test-Doubles),
      %br
      manche Aspekte nicht testbar (Usability, Sicherheit, Nebenläufigkeit)
    %li Code-Qualität der Tests enscheidend für langfristigen Erfolg
    %li Kein Allheilmittel
%section.slide
  %h2 Aussagen
  %ul
    %li Studien und Erfahrung aus der Arbeit &rarr; besserer Code beim Einsatz von TDD
    %li Effektivität abhängig von vorhanden Werkzeugen: parallelisierbare Testrunner, Code-Metriken, Test-Frameworks, Autotest-Runner
    %li Ruby on Rails für (testgetriebene) Web-Anwendungen ideal
    %li
      %strong relevante Entwicklungstechnik, die jeder Programmierer lernen (und üben) sollte

%section.slide
  %h2 Ausblick
  %ul
    %li Akzeptanztests als treibende Kraft (ATTD)
    %li Sammlung von typischen Kennzahlen von Rails-Projekten als Benchmark.
    %li psychologische Auswirkungen von TDD &rarr; kleine Belohnungen, fast wie ein Spiel
    %li weitere Fallstudien zu TDD mit anderen Programmierplattformen
%section.slide
  %h1 Fragen?
