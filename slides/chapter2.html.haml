%section.slide.toc#theoretisch
  %h1 Theoretische Grundlagen

%section.slide
  %h2.subtitle
    Testgetriebene Entwicklung
    %br
    von Webserver-Anwendungen
    %br
    auf Basis von <u>Ruby on Rails</u>

%section.slide
  %h1 Ruby &amp; Rails

%section.slide.toc
  %h2 Ruby
  = image_tag_with_caption "imgs/ruby.gif",  "ruby-lang.org", "side-image"
  %ul
    %li Yukihiro Matsumoto, 1995 v.0.95, 2011 v.1.9.3
    %li Vielzahl von Implementierungen: MRI, JRuby, Rubininus, <strike>IronRuby</strike>, Blue Ruby
    %li Anstehende ISO-Standardisierung (ISO/IEC 30170)

    / Lesbarkeit, hohes Ziel
%section.slide
  %h2 Features
  %ul
    %li dynamisch typisierte Sprache (Skriptsprache)
    %li Paradigmen: OOP, funktional, prozedural
    %li <em>meta programming</em> &rarr; generische Programmierung
    %li Reflexion, interne DSL, Mixins/Module, Duck-Typing
    / erlaubt sehr generische und platzsparende Programmierung
    %li
      Ziel: Sprache für Menschen, nicht (nur) Maschinen
      %ul.slide
        %li Wenige Sonderzeichen
        %li
          Sprechende Syntax, z.B.
          =pygmentize "ruby" do
            :plain
              5.times do
                run_program
              end

/ Zu ruby man ebenfalls mehrere Vortraege halten
%section.slide
  %h2 Ruby on Rails
  / Etwas ueber Rails sagen: 2006?
  / MVC Web-Framework. Unterst
  %ul
    %li Full-Stack Framework
    / Webserver, Templating, Datenbankengine
    %li Konzepte: MVC-Muster, DRY, Convention over Configuration
    / was ist CoC, Beispiel, DRY -> Definition der Spalten
    %li Gems
    / Große Auswahl von Gems in einer aktiven Community -> Github Forks
    %li Testen hoch priorisiert
    / Testen hat in der RoR C einen hohen Stellenwert
    / Testtools liegen schon bei


%section.slide
  %h2.subtitle
    <u>Testgetriebene Entwicklung</u>
    %br
    von Webserver-Anwendungen
    %br
    auf Basis von Ruby on Rails

%section.slide.toc
  %h2 Automatisierte dynamischer Software-Test
  %blockquote(cite="http://oxforddictionaries.com/definition/test")
    %p to test: take measures to check the quality, performance, or reliability of sth. [...]
    %cite Oxford Dictionary
  %ul
    / Was ist test? Spezif. von Erwartungen
    %li Automatisiert &ndash; manuell
    / Test wird vollstaendig vom Computer ausgefuehrt -> Geschwindigkeitsgewinn
    %li dynamisch &ndash; statisch
    / Programmcode wird ausgefuehrt, oder geskriptet, anst
    %li Unittest für TDD relevant

%section.slide#tdd
  =image_tag_with_caption "imgs/TestDrivenDevelopment_155FE599.png", "LosTechies.com"
%section.slide.toc
  %h2 Testgetriebene Entwicklung (TDD)
  %ul
    %li iterative Entwicklungstechnik
    %li bekannt durch eXtreme Programming (XP)

%section.slide.red#red
  %h2 Red

  =pygmentize "ruby" do
    :plain
      class TestAdder &lt; Test::Unit::TestCase
        def test_addition
          assert_equal 3, Adder.add(1,2)
        end
      end
  %pre.test-output
    :preserve
      1) Error:
      test_addition(TestAdder):
      NameError: uninitialized constant TestAdder::Adder
      ./test/test_adder.rb:3:in `test_addition'
      <strong class='red'>1 tests, 0 assertions, 0 failures, 1 errors</strong>

%section.slide.green#green
  %h2 Green
  =pygmentize "ruby" do
    :plain
      class Adder
        def self.add(a,b)
          return 3
        end
      end
  %pre.test-output
    :preserve
      Finished in 0.000342 seconds.

      <strong class='green'>1 tests, 1 assertions, 0 failures, 0 errors</strong>


%section.slide.refactor#refactor
  %h2 Refactor
  =pygmentize "ruby" do
    :plain
      class Adder
        def self.add(a,b)
          a + b
        end
      end
  =pygmentize "ruby" do
    :plain
      def self.add(*args)
        args.sum
      end



%section.slide#circle
  %h2 Kreislauf
  = image_tag_with_caption "imgs/rgr.jpg",  "Agile in a Flash"

%section.slide
  %h2 Vorteile
  %ul
    %li Code und Test entstehen im Einklang
    %li &rarr; übersichtlichere Methoden
    %li von Stunde 0 an hohe Testabdeckung
    %li ermöglicht sichere Refaktorisierungen

